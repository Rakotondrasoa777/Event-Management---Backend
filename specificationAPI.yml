openapi: 3.0.0
info:
  title: Tapakila Management API
  description: API for managing events
  version: 1.0.0
servers:
  - url: http://localhost:1818
    description: Server of Tapakila

paths:
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required: [username, email, password]
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required: [email, password]
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  / reservation:
    get:
      tags: [Authentication]
      summary: Protected reservation endpoint
      security:
        - bearerAuth: []
      responses:
        200:
          description: Access granted to reservation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /events:
    get:
      tags: [Events]
      summary: Get all events
      responses:
        200:
          description: List of all events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    
  /events/create:
    post:
      tags: [Events]
      summary: Create a new event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
      responses:
        201:
          description: Event created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  event:
                    $ref: '#/components/schemas/Event'

  /events/{id}:
    get:
      tags: [Events]
      summary: Get event by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    
  /events/update/{id}:
    put:
      tags: [Events]
      summary: Update event by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
      responses:
        200:
          description: Event updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  event:
                    $ref: '#/components/schemas/Event'
    
  /events/delete/{id}:
    delete:
      tags: [Events]
      summary: Delete event by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Event deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /events/date/{date}:
    get:
      tags: [Events]
      summary: Filter events by date
      parameters:
        - name: date
          in: path
          required: true
          schema:
            type: string
            format: date
      responses:
        200:
          description: List of filtered events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

  /users:
    get:
      tags: [Users]
      summary: Get all users
      responses:
        200:
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  
  /users/create:
    post:
      tags: [Users]
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  
  /users/update/{id}:
    put:
      tags: [Users]
      summary: Update user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
  
  /users/delete/{id}:
    delete:
      tags: [Users]
      summary: Delete user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
    
    UserInput:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required: [email, password]
    
    Event:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        date_of_event:
          type: string
          format: date-time
        description:
          type: string
        categorie:
          type: string
        location:
          type: string
        available_of_ticket:
          type: string
          format: date
    EventInput:
      type: object
      properties:
        name:
          type: string
        date_of_event:
          type: string
          format: date-time
        description:
          type: string
        categorie:
          type: string
        location:
          type: string
        available_of_ticket:
          type: string
          format: date
      required: [name, date_of_event, decription, categorie, location, available_of_ticket]
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT